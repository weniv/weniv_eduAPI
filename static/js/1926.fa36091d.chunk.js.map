{"version":3,"file":"static/js/1926.fa36091d.chunk.js","mappings":"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","sources":["../node_modules/shiki/dist/langs/regexp.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"RegExp\", \"fileTypes\": [\"re\"], \"name\": \"regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }], \"repository\": { \"codetags\": { \"captures\": { \"1\": { \"name\": \"keyword.codetag.notation.python\" } }, \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\" }, \"fregexp-base-expression\": { \"patterns\": [{ \"include\": \"#fregexp-quantifier\" }, { \"include\": \"#fstring-formatting-braces\" }, { \"match\": \"\\\\{.*?\\\\}\" }, { \"include\": \"#regexp-base-common\" }] }, \"fregexp-quantifier\": { \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" }, \"fstring-formatting-braces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"2\": { \"name\": \"invalid.illegal.brace.python\" }, \"3\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"empty braces are illegal\", \"match\": \"({)(\\\\s*?)(})\" }, { \"match\": \"({{|}})\", \"name\": \"constant.character.escape.python\" }] }, \"regexp-backreference\": { \"captures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.backreference.regexp\" }, \"3\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\" } }, \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\", \"name\": \"meta.backreference.named.regexp\" }, \"regexp-backreference-number\": { \"captures\": { \"1\": { \"name\": \"entity.name.tag.backreference.regexp\" } }, \"match\": \"(\\\\\\\\[1-9]\\\\d?)\", \"name\": \"meta.backreference.regexp\" }, \"regexp-base-common\": { \"patterns\": [{ \"match\": \"\\\\.\", \"name\": \"support.other.match.any.regexp\" }, { \"match\": \"\\\\^\", \"name\": \"support.other.match.begin.regexp\" }, { \"match\": \"\\\\$\", \"name\": \"support.other.match.end.regexp\" }, { \"match\": \"[+*?]\\\\??\", \"name\": \"keyword.operator.quantifier.regexp\" }, { \"match\": \"\\\\|\", \"name\": \"keyword.operator.disjunction.regexp\" }, { \"include\": \"#regexp-escape-sequence\" }] }, \"regexp-base-expression\": { \"patterns\": [{ \"include\": \"#regexp-quantifier\" }, { \"include\": \"#regexp-base-common\" }] }, \"regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"regexp-charecter-set-escapes\": { \"patterns\": [{ \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-special\" }, { \"match\": \"\\\\\\\\([0-7]{1,3})\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-escape-catchall\": { \"match\": \"\\\\\\\\(.|\\\\n)\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-character\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-sequence\": { \"patterns\": [{ \"include\": \"#regexp-escape-special\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-backreference-number\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-escape-special\": { \"match\": \"\\\\\\\\([AbBdDsSwWZ])\", \"name\": \"support.other.escape.special.regexp\" }, \"regexp-escape-unicode\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\", \"name\": \"constant.character.unicode.regexp\" }, \"regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#regexp-character-set\" }, { \"include\": \"#regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#regexp-lookahead\" }, { \"include\": \"#regexp-lookahead-negative\" }, { \"include\": \"#regexp-lookbehind\" }, { \"include\": \"#regexp-lookbehind-negative\" }, { \"include\": \"#regexp-conditional\" }, { \"include\": \"#regexp-parentheses-non-capturing\" }, { \"include\": \"#regexp-parentheses\" }] }, \"regexp-flags\": { \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\", \"name\": \"storage.modifier.flag.regexp\" }, \"regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-quantifier\": { \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" } }, \"scopeName\": \"source.regexp.python\", \"aliases\": [\"regex\"] });\nvar regexp = [\n  lang\n];\n\nexport { regexp as default };\n"],"names":["regexp","Object","freeze"],"sourceRoot":""}