{"version":3,"file":"static/js/4243.ec96da74.chunk.js","mappings":"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","sources":["../node_modules/shiki/dist/langs/rust.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Rust\", \"name\": \"rust\", \"patterns\": [{ \"begin\": \"(<)(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.brackets.angle.rust\" }, \"2\": { \"name\": \"punctuation.brackets.square.rust\" } }, \"comment\": \"boxed slice literal\", \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.macro.dollar.rust\" }, \"3\": { \"name\": \"keyword.other.crate.rust\" }, \"4\": { \"name\": \"entity.name.type.metavariable.rust\" }, \"6\": { \"name\": \"keyword.operator.key-value.rust\" }, \"7\": { \"name\": \"variable.other.metavariable.specifier.rust\" } }, \"comment\": \"macro type metavariables\", \"match\": \"(\\\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?\", \"name\": \"meta.macro.metavariable.type.rust\", \"patterns\": [{ \"include\": \"#keywords\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.macro.dollar.rust\" }, \"2\": { \"name\": \"variable.other.metavariable.name.rust\" }, \"4\": { \"name\": \"keyword.operator.key-value.rust\" }, \"5\": { \"name\": \"variable.other.metavariable.specifier.rust\" } }, \"comment\": \"macro metavariables\", \"match\": \"(\\\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?\", \"name\": \"meta.macro.metavariable.rust\", \"patterns\": [{ \"include\": \"#keywords\" }] }, { \"captures\": { \"1\": { \"name\": \"entity.name.function.macro.rules.rust\" }, \"3\": { \"name\": \"entity.name.function.macro.rust\" }, \"4\": { \"name\": \"entity.name.type.macro.rust\" }, \"5\": { \"name\": \"punctuation.brackets.curly.rust\" } }, \"comment\": \"macro rules\", \"match\": \"\\\\b(macro_rules!)\\\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\\\s+(\\\\{)\", \"name\": \"meta.macro.rules.rust\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"entity.name.module.rust\" } }, \"comment\": \"modules\", \"match\": \"(mod)\\\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)\" }, { \"begin\": \"\\\\b(extern)\\\\s+(crate)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"keyword.other.crate.rust\" } }, \"comment\": \"external crate imports\", \"end\": \";\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.semi.rust\" } }, \"name\": \"meta.import.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#punctuation\" }] }, { \"begin\": \"\\\\b(use)\\\\s\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.rust\" } }, \"comment\": \"use statements\", \"end\": \";\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.semi.rust\" } }, \"name\": \"meta.use.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }, { \"include\": \"#lvariables\" }] }, { \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#types\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#variables\" }], \"repository\": { \"attributes\": { \"begin\": \"(#)(\\\\!?)(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.attribute.rust\" }, \"3\": { \"name\": \"punctuation.brackets.attribute.rust\" } }, \"comment\": \"attributes\", \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.attribute.rust\" } }, \"name\": \"meta.attribute.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#types\" }] }, \"block-comments\": { \"patterns\": [{ \"comment\": \"empty block comments\", \"match\": \"/\\\\*\\\\*/\", \"name\": \"comment.block.rust\" }, { \"begin\": \"/\\\\*\\\\*\", \"comment\": \"block documentation comments\", \"end\": \"\\\\*/\", \"name\": \"comment.block.documentation.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }] }, { \"begin\": \"/\\\\*(?!\\\\*)\", \"comment\": \"block comments\", \"end\": \"\\\\*/\", \"name\": \"comment.block.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }] }] }, \"comments\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.comment.rust\" } }, \"comment\": \"documentation comments\", \"match\": \"(///).*$\", \"name\": \"comment.line.documentation.rust\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.definition.comment.rust\" } }, \"comment\": \"line comments\", \"match\": \"(//).*$\", \"name\": \"comment.line.double-slash.rust\" }] }, \"constants\": { \"patterns\": [{ \"comment\": \"ALL CAPS constants\", \"match\": \"\\\\b[A-Z]{2}[A-Z0-9_]*\\\\b\", \"name\": \"constant.other.caps.rust\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.rust\" }, \"2\": { \"name\": \"constant.other.caps.rust\" } }, \"comment\": \"constant declarations\", \"match\": \"\\\\b(const)\\\\s+([A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.separator.dot.decimal.rust\" }, \"2\": { \"name\": \"keyword.operator.exponent.rust\" }, \"3\": { \"name\": \"keyword.operator.exponent.sign.rust\" }, \"4\": { \"name\": \"constant.numeric.decimal.exponent.mantissa.rust\" }, \"5\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"decimal integers and floats\", \"match\": \"\\\\b\\\\d[\\\\d_]*(\\\\.?)[\\\\d_]*(?:(E|e)([+-]?)([\\\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.decimal.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"hexadecimal integers\", \"match\": \"\\\\b0x[\\\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.hex.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"octal integers\", \"match\": \"\\\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.oct.rust\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"binary integers\", \"match\": \"\\\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\\\b\", \"name\": \"constant.numeric.bin.rust\" }, { \"comment\": \"booleans\", \"match\": \"\\\\b(true|false)\\\\b\", \"name\": \"constant.language.bool.rust\" }] }, \"escapes\": { \"captures\": { \"1\": { \"name\": \"constant.character.escape.backslash.rust\" }, \"2\": { \"name\": \"constant.character.escape.bit.rust\" }, \"3\": { \"name\": \"constant.character.escape.unicode.rust\" }, \"4\": { \"name\": \"constant.character.escape.unicode.punctuation.rust\" }, \"5\": { \"name\": \"constant.character.escape.unicode.punctuation.rust\" } }, \"comment\": \"escapes: ASCII, byte, Unicode, quote, regex\", \"match\": \"(\\\\\\\\)(?:(?:(x[0-7][\\\\da-fA-F])|(u(\\\\{)[\\\\da-fA-F]{4,6}(\\\\}))|.))\", \"name\": \"constant.character.escape.rust\" }, \"functions\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.other.rust\" }, \"2\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"comment\": \"pub as a function\", \"match\": \"\\\\b(pub)(\\\\()\" }, { \"begin\": \"\\\\b(fn)\\\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\\\()|(<))\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.fn.rust\" }, \"2\": { \"name\": \"entity.name.function.rust\" }, \"4\": { \"name\": \"punctuation.brackets.round.rust\" }, \"5\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"comment\": \"function definition\", \"end\": \"\\\\{|;\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.curly.rust\" } }, \"name\": \"meta.function.definition.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"begin\": \"((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.rust\" }, \"2\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"comment\": \"function/method calls, chaining\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"name\": \"meta.function.call.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"begin\": \"((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.rust\" } }, \"comment\": \"function/method calls with turbofish\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.round.rust\" } }, \"name\": \"meta.function.call.rust\", \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#attributes\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#constants\" }, { \"include\": \"#gtypes\" }, { \"include\": \"#functions\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#macros\" }, { \"include\": \"#namespaces\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#strings\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }] }, \"gtypes\": { \"patterns\": [{ \"comment\": \"option types\", \"match\": \"\\\\b(Some|None)\\\\b\", \"name\": \"entity.name.type.option.rust\" }, { \"comment\": \"result types\", \"match\": \"\\\\b(Ok|Err)\\\\b\", \"name\": \"entity.name.type.result.rust\" }] }, \"interpolations\": { \"captures\": { \"1\": { \"name\": \"punctuation.definition.interpolation.rust\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.rust\" } }, \"comment\": \"curly brace interpolations\", \"match\": '({)[^\"{}]*(})', \"name\": \"meta.interpolation.rust\" }, \"keywords\": { \"patterns\": [{ \"comment\": \"control flow keywords\", \"match\": \"\\\\b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\\\\b\", \"name\": \"keyword.control.rust\" }, { \"comment\": \"storage keywords\", \"match\": \"\\\\b(extern|let|macro|mod)\\\\b\", \"name\": \"keyword.other.rust storage.type.rust\" }, { \"comment\": \"const keyword\", \"match\": \"\\\\b(const)\\\\b\", \"name\": \"storage.modifier.rust\" }, { \"comment\": \"type keyword\", \"match\": \"\\\\b(type)\\\\b\", \"name\": \"keyword.declaration.type.rust storage.type.rust\" }, { \"comment\": \"enum keyword\", \"match\": \"\\\\b(enum)\\\\b\", \"name\": \"keyword.declaration.enum.rust storage.type.rust\" }, { \"comment\": \"trait keyword\", \"match\": \"\\\\b(trait)\\\\b\", \"name\": \"keyword.declaration.trait.rust storage.type.rust\" }, { \"comment\": \"struct keyword\", \"match\": \"\\\\b(struct)\\\\b\", \"name\": \"keyword.declaration.struct.rust storage.type.rust\" }, { \"comment\": \"storage modifiers\", \"match\": \"\\\\b(abstract|static)\\\\b\", \"name\": \"storage.modifier.rust\" }, { \"comment\": \"other keywords\", \"match\": \"\\\\b(as|async|become|box|dyn|move|final|gen|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual|where)\\\\b\", \"name\": \"keyword.other.rust\" }, { \"comment\": \"fn\", \"match\": \"\\\\bfn\\\\b\", \"name\": \"keyword.other.fn.rust\" }, { \"comment\": \"crate\", \"match\": \"\\\\bcrate\\\\b\", \"name\": \"keyword.other.crate.rust\" }, { \"comment\": \"mut\", \"match\": \"\\\\bmut\\\\b\", \"name\": \"storage.modifier.mut.rust\" }, { \"comment\": \"logical operators\", \"match\": \"(\\\\^|\\\\||\\\\|\\\\||&&|<<|>>|!)(?!=)\", \"name\": \"keyword.operator.logical.rust\" }, { \"comment\": \"logical AND, borrow references\", \"match\": \"&(?![&=])\", \"name\": \"keyword.operator.borrow.and.rust\" }, { \"comment\": \"assignment operators\", \"match\": \"(\\\\+=|-=|\\\\*=|/=|%=|\\\\^=|&=|\\\\|=|<<=|>>=)\", \"name\": \"keyword.operator.assignment.rust\" }, { \"comment\": \"single equal\", \"match\": \"(?<![<>])=(?!=|>)\", \"name\": \"keyword.operator.assignment.equal.rust\" }, { \"comment\": \"comparison operators\", \"match\": \"(=(=)?(?!>)|!=|<=|(?<!=)>=)\", \"name\": \"keyword.operator.comparison.rust\" }, { \"comment\": \"math operators\", \"match\": \"(([+%]|(\\\\*(?!\\\\w)))(?!=))|(-(?!>))|(/(?!/))\", \"name\": \"keyword.operator.math.rust\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.brackets.round.rust\" }, \"2\": { \"name\": \"punctuation.brackets.square.rust\" }, \"3\": { \"name\": \"punctuation.brackets.curly.rust\" }, \"4\": { \"name\": \"keyword.operator.comparison.rust\" }, \"5\": { \"name\": \"punctuation.brackets.round.rust\" }, \"6\": { \"name\": \"punctuation.brackets.square.rust\" }, \"7\": { \"name\": \"punctuation.brackets.curly.rust\" } }, \"comment\": \"less than, greater than (special case)\", \"match\": \"(?:\\\\b|(?:(\\\\))|(\\\\])|(\\\\})))[ \\\\t]+([<>])[ \\\\t]+(?:\\\\b|(?:(\\\\()|(\\\\[)|(\\\\{)))\" }, { \"comment\": \"namespace operator\", \"match\": \"::\", \"name\": \"keyword.operator.namespace.rust\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.dereference.rust\" } }, \"comment\": \"dereference asterisk\", \"match\": \"(\\\\*)(?=\\\\w+)\" }, { \"comment\": \"subpattern binding\", \"match\": \"@\", \"name\": \"keyword.operator.subpattern.rust\" }, { \"comment\": \"dot access\", \"match\": \"\\\\.(?!\\\\.)\", \"name\": \"keyword.operator.access.dot.rust\" }, { \"comment\": \"ranges, range patterns\", \"match\": \"\\\\.{2}(=|\\\\.)?\", \"name\": \"keyword.operator.range.rust\" }, { \"comment\": \"colon\", \"match\": \":(?!:)\", \"name\": \"keyword.operator.key-value.rust\" }, { \"comment\": \"dashrocket, skinny arrow\", \"match\": \"->\", \"name\": \"keyword.operator.arrow.skinny.rust\" }, { \"comment\": \"hashrocket, fat arrow\", \"match\": \"=>\", \"name\": \"keyword.operator.arrow.fat.rust\" }, { \"comment\": \"dollar macros\", \"match\": \"\\\\$\", \"name\": \"keyword.operator.macro.dollar.rust\" }, { \"comment\": \"question mark operator, questionably sized, macro kleene matcher\", \"match\": \"\\\\?\", \"name\": \"keyword.operator.question.rust\" }] }, \"lifetimes\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.lifetime.rust\" }, \"2\": { \"name\": \"entity.name.type.lifetime.rust\" } }, \"comment\": \"named lifetime parameters\", \"match\": \"(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.borrow.rust\" }, \"2\": { \"name\": \"punctuation.definition.lifetime.rust\" }, \"3\": { \"name\": \"entity.name.type.lifetime.rust\" } }, \"comment\": \"borrowing references to named lifetimes\", \"match\": \"(\\\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\\\b\" }] }, \"lvariables\": { \"patterns\": [{ \"comment\": \"self\", \"match\": \"\\\\b[Ss]elf\\\\b\", \"name\": \"variable.language.self.rust\" }, { \"comment\": \"super\", \"match\": \"\\\\bsuper\\\\b\", \"name\": \"variable.language.super.rust\" }] }, \"macros\": { \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"entity.name.function.macro.rust\" }, \"3\": { \"name\": \"entity.name.type.macro.rust\" } }, \"comment\": \"macros\", \"match\": \"(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))\", \"name\": \"meta.macro.rust\" }] }, \"namespaces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.namespace.rust\" }, \"2\": { \"name\": \"keyword.operator.namespace.rust\" } }, \"comment\": \"namespace (non-type, non-function path segment)\", \"match\": \"(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super|self)::)\" }] }, \"punctuation\": { \"patterns\": [{ \"comment\": \"comma\", \"match\": \",\", \"name\": \"punctuation.comma.rust\" }, { \"comment\": \"curly braces\", \"match\": \"[{}]\", \"name\": \"punctuation.brackets.curly.rust\" }, { \"comment\": \"parentheses, round brackets\", \"match\": \"[()]\", \"name\": \"punctuation.brackets.round.rust\" }, { \"comment\": \"semicolon\", \"match\": \";\", \"name\": \"punctuation.semi.rust\" }, { \"comment\": \"square brackets\", \"match\": \"[\\\\[\\\\]]\", \"name\": \"punctuation.brackets.square.rust\" }, { \"comment\": \"angle brackets\", \"match\": \"(?<!=)[<>]\", \"name\": \"punctuation.brackets.angle.rust\" }] }, \"strings\": { \"patterns\": [{ \"begin\": '(b?)(\")', \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.rust\" } }, \"comment\": \"double-quoted strings and byte strings\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.rust\" } }, \"name\": \"string.quoted.double.rust\", \"patterns\": [{ \"include\": \"#escapes\" }, { \"include\": \"#interpolations\" }] }, { \"begin\": '(b?r)(#*)(\")', \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.raw.rust\" }, \"3\": { \"name\": \"punctuation.definition.string.rust\" } }, \"comment\": \"double-quoted raw strings and raw byte strings\", \"end\": '(\")(\\\\2)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.rust\" }, \"2\": { \"name\": \"punctuation.definition.string.raw.rust\" } }, \"name\": \"string.quoted.double.rust\" }, { \"begin\": \"(b)?(')\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.byte.raw.rust\" }, \"2\": { \"name\": \"punctuation.definition.char.rust\" } }, \"comment\": \"characters and bytes\", \"end\": \"'\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.char.rust\" } }, \"name\": \"string.quoted.single.char.rust\", \"patterns\": [{ \"include\": \"#escapes\" }] }] }, \"types\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.type.numeric.rust\" } }, \"comment\": \"numeric types\", \"match\": \"(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\\\b\" }, { \"begin\": \"\\\\b(_?[A-Z][A-Za-z0-9_]*)(<)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.type.rust\" }, \"2\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"comment\": \"parameterized types\", \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.brackets.angle.rust\" } }, \"patterns\": [{ \"include\": \"#block-comments\" }, { \"include\": \"#comments\" }, { \"include\": \"#keywords\" }, { \"include\": \"#lvariables\" }, { \"include\": \"#lifetimes\" }, { \"include\": \"#punctuation\" }, { \"include\": \"#types\" }, { \"include\": \"#variables\" }] }, { \"comment\": \"primitive types\", \"match\": \"\\\\b(bool|char|str)\\\\b\", \"name\": \"entity.name.type.primitive.rust\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.trait.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.trait.rust\" } }, \"comment\": \"trait declarations\", \"match\": \"\\\\b(trait)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.struct.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.struct.rust\" } }, \"comment\": \"struct declarations\", \"match\": \"\\\\b(struct)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.enum.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.enum.rust\" } }, \"comment\": \"enum declarations\", \"match\": \"\\\\b(enum)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.declaration.type.rust storage.type.rust\" }, \"2\": { \"name\": \"entity.name.type.declaration.rust\" } }, \"comment\": \"type declarations\", \"match\": \"\\\\b(type)\\\\s+(_?[A-Z][A-Za-z0-9_]*)\\\\b\" }, { \"comment\": \"types\", \"match\": \"\\\\b_?[A-Z][A-Za-z0-9_]*\\\\b(?!!)\", \"name\": \"entity.name.type.rust\" }] }, \"variables\": { \"patterns\": [{ \"comment\": \"variables\", \"match\": \"\\\\b(?<!(?<!\\\\.)\\\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\\\b\", \"name\": \"variable.other.rust\" }] } }, \"scopeName\": \"source.rust\", \"aliases\": [\"rs\"] });\nvar rust = [\n  lang\n];\n\nexport { rust as default };\n"],"names":["rust","Object","freeze"],"sourceRoot":""}