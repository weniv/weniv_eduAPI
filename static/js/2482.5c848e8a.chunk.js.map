{"version":3,"file":"static/js/2482.5c848e8a.chunk.js","mappings":"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","sources":["../node_modules/shiki/dist/langs/matlab.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"MATLAB\", \"fileTypes\": [\"m\"], \"name\": \"matlab\", \"patterns\": [{ \"comment\": \"This and #all_after_command_dual are split out so #command_dual can be excluded in things like (), {}, []\", \"include\": \"#all_before_command_dual\" }, { \"include\": \"#command_dual\" }, { \"include\": \"#all_after_command_dual\" }], \"repository\": { \"all_after_command_dual\": { \"patterns\": [{ \"include\": \"#string\" }, { \"include\": \"#line_continuation\" }, { \"include\": \"#comments\" }, { \"include\": \"#conjugate_transpose\" }, { \"include\": \"#transpose\" }, { \"include\": \"#constants\" }, { \"include\": \"#variables\" }, { \"include\": \"#numbers\" }, { \"include\": \"#operators\" }] }, \"all_before_command_dual\": { \"patterns\": [{ \"include\": \"#classdef\" }, { \"include\": \"#function\" }, { \"include\": \"#blocks\" }, { \"include\": \"#control_statements\" }, { \"include\": \"#global_persistent\" }, { \"include\": \"#parens\" }, { \"include\": \"#square_brackets\" }, { \"include\": \"#indexing_curly_brackets\" }, { \"include\": \"#curly_brackets\" }] }, \"blocks\": { \"patterns\": [{ \"begin\": \"\\\\s*(?:^|[\\\\s,;])(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.for.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.for.matlab\" } }, \"name\": \"meta.for.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(if)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.if.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.if.matlab\" }, \"2\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"name\": \"meta.if.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.elseif.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(elseif)\\\\b(.*)$\\\\n?\", \"name\": \"meta.elseif.matlab\" }, { \"captures\": { \"2\": { \"name\": \"keyword.control.else.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(else)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.else.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(parfor)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.for.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.for.matlab\" } }, \"name\": \"meta.parfor.matlab\", \"patterns\": [{ \"begin\": \"\\\\G(?!$)\", \"end\": \"$\\\\n?\", \"name\": \"meta.parfor-quantity.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(spmd)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.spmd.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.spmd.matlab\" } }, \"name\": \"meta.spmd.matlab\", \"patterns\": [{ \"begin\": \"\\\\G(?!$)\", \"end\": \"$\\\\n?\", \"name\": \"meta.spmd-statement.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(switch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.switch.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.switch.matlab\" } }, \"name\": \"meta.switch.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.case.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(case)\\\\b(.*)$\\\\n?\", \"name\": \"meta.case.matlab\" }, { \"captures\": { \"2\": { \"name\": \"keyword.control.otherwise.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(otherwise)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.otherwise.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(try)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.try.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.try.matlab\" } }, \"name\": \"meta.try.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.catch.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(catch)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.catch.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(while)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.while.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.while.matlab\" } }, \"name\": \"meta.while.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }] }, \"braced_validator_list\": { \"begin\": \"\\\\s*({)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"comment\": \"Validator functions. Treated as a recursive group to permit nested brackets, quotes, etc.\", \"end\": \"(})\", \"endCaptures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"patterns\": [{ \"include\": \"#braced_validator_list\" }, { \"include\": \"#validator_strings\" }, { \"include\": \"#line_continuation\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"match\": `([^{}}'\"\\\\.]+)` }, { \"match\": \"\\\\.\", \"name\": \"storage.type.matlab\" }] }, \"classdef\": { \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(classdef)\\n\\\\b\\\\s*\\n(.*)\\n\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.class.matlab\" }, \"3\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.class.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"include\": \"#string\" }] }] }, \"2\": { \"name\": \"meta.class-declaration.matlab\" }, \"3\": { \"name\": \"entity.name.section.class.matlab\" }, \"4\": { \"name\": \"keyword.operator.other.matlab\" }, \"5\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z][a-zA-Z0-9_]*)*\", \"name\": \"entity.other.inherited-class.matlab\" }, { \"match\": \"&\", \"name\": \"keyword.operator.other.matlab\" }] }, \"6\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"match\": \"(?x)\\n\t\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\\n\t\t\t\t\t\t\t\t\t\t\t \\\\( [^)]* \\\\)\\n\t\t\t\t\t\t\t\t\t\t)?\\n\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t(\\n\t\t\t\t\t\t\t\t\t\t\t([a-zA-Z][a-zA-Z0-9_]*)\t\t\t# Class name\\n\t\t\t\t\t\t\t\t\t\t\t(?:\t\t\t\t\t\t\t\t# Optional inheritance\\n\t\t\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t\t\t(<)\\n\t\t\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t\t\t([^%]*)\\n\t\t\t\t\t\t\t\t\t\t\t)?\\n\t\t\t\t\t\t\t\t\t\t)\\n\t\t\t\t\t\t\t\t\t\t\\\\s*($|(?=(%|...)).*)\\n\t\t\t\t\t\t\t\t\t\" }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.class.matlab\" } }, \"name\": \"meta.class.matlab\", \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(properties)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.properties.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.properties.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.properties.matlab\" } }, \"name\": \"meta.properties.matlab\", \"patterns\": [{ \"include\": \"#validators\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(methods)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.methods.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.methods.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.methods.matlab\" } }, \"name\": \"meta.methods.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(events)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.events.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.events.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.events.matlab\" } }, \"name\": \"meta.events.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(enumeration)\\\\b([^%]*)\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.enumeration.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.enumeration.matlab\" } }, \"name\": \"meta.enumeration.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }] }, \"command_dual\": { \"captures\": { \"1\": { \"name\": \"string.interpolated.matlab\" }, \"2\": { \"name\": \"variable.other.command.matlab\" }, \"28\": { \"name\": \"comment.line.percentage.matlab\" } }, \"comment\": \"  1        2                                  3                                                    4                                                  5                                                    6                                                         7                                                                             8                 9                            10                   11                      12                         13                   14                                                               1516       17                                                             18                                                                                                                               19                      20                                     21                                    22                                      23                                         24                                         25                                                                         26            27                 28\", \"match\": `^\\\\s*((?# A> )([b-df-hk-moq-zA-HJ-MO-Z]\\\\w*|a|an|a([A-Za-mo-z0-9_]\\\\w*|n[A-Za-rt-z0-9_]\\\\w*|ns\\\\w+)|e|ep|e([A-Za-oq-z0-9_]\\\\w*|p[A-Za-rt-z0-9_]\\\\w*|ps\\\\w+)|in|i([A-Za-mo-z0-9_]\\\\w*|n[A-Za-eg-z0-9_]\\\\w*|nf\\\\w+)|I|In|I([A-Za-mo-z0-9_]\\\\w*|n[A-Za-eg-z0-9_]\\\\w*|nf\\\\w+)|j\\\\w+|N|Na|N([A-Zb-z0-9_]\\\\w*|a[A-MO-Za-z0-9_]\\\\w*|aN\\\\w+)|n|na|nar|narg|nargi|nargo|nargou|n([A-Zb-z0-9_]\\\\w*|a([A-Za-mo-qs-z0-9_]\\\\w*|n\\\\w+|r([A-Za-fh-z0-9_]\\\\w*|g([A-Za-hj-nq-z0-9_]\\\\w*|i([A-Za-mo-z0-9_]\\\\w*|n\\\\w+)|o([A-Za-tv-z0-9_]\\\\w*|u([A-Za-su-z]\\\\w*|t\\\\w+))))))|p|p[A-Za-hj-z0-9_]\\\\w*|pi\\\\w+)(?# <A )\\\\s+(((?# B> )([^\\\\s;,%()=.{&|~<>:+\\\\-*/\\\\\\\\@^'\"]|(?=')|(?=\"))(?# <B )|(?# C> )(\\\\.\\\\^|\\\\.\\\\*|\\\\./|\\\\.\\\\\\\\|\\\\.'|\\\\.\\\\(|&&|==|\\\\|\\\\||&(?=[^&])|\\\\|(?=[^\\\\|])|~=|<=|>=|~(?!=)|<(?!=)|>(?!=)|:|\\\\+|-|\\\\*|/|\\\\\\\\|@|\\\\^)(?# <C )(?# D> )([^\\\\s]|\\\\s*(?=%)|\\\\s+$|\\\\s+(,|;|\\\\)|}|\\\\]|&|\\\\||<|>|=|:|\\\\*|/|\\\\\\\\|\\\\^|@|(\\\\.[^\\\\d.]|\\\\.\\\\.[^.])))(?# <D )|(?# E> )(\\\\.[^^*/\\\\\\\\'(\\\\sA-Za-z])(?# <E ))(?# F> )([^%]|'[^']*'|\"[^\"]*\")*(?# <F )|(?# X> )(\\\\.(?=\\\\s)|\\\\.[A-Za-z]|(?={))(?# <X )(?# Y> )([^(=\\\\'\"%]|==|'[^']*'|\"[^\"]*\"|\\\\(|\\\\([^)%]*\\\\)|\\\\[|\\\\[[^\\\\]%]*\\\\]|{|{[^}%]*})*(\\\\.\\\\.\\\\.[^%]*)?((?=%)|$)(?# <Y )))(%.*)?$` }, \"comment_block\": { \"begin\": \"(^[\\\\s]*)%\\\\{[^\\\\n\\\\S]*+\\\\n\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"^[\\\\s]*%\\\\}[^\\\\n\\\\S]*+(?:\\\\n|$)\", \"name\": \"comment.block.percentage.matlab\", \"patterns\": [{ \"include\": \"#comment_block\" }, { \"match\": \"^[^\\\\n]*\\\\n\" }] }, \"comments\": { \"patterns\": [{ \"begin\": \"(^[ \\\\t]+)?(?=%%\\\\s)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.matlab\" } }, \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \"%%\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.double-percentage.matlab\", \"patterns\": [{ \"begin\": \"\\\\G[^\\\\S\\\\n]*(?![\\\\n\\\\s])\", \"contentName\": \"meta.cell.matlab\", \"end\": \"(?=\\\\n)\" }] }] }, { \"include\": \"#comment_block\" }, { \"begin\": \"(^[ \\\\t]+)?(?=%)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.matlab\" } }, \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \"%\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.percentage.matlab\" }] }] }, \"conjugate_transpose\": { \"match\": \"((?<=[^\\\\s])|(?<=\\\\])|(?<=\\\\))|(?<=\\\\}))'\", \"name\": \"keyword.operator.transpose.matlab\" }, \"constants\": { \"comment\": \"MATLAB Constants\", \"match\": \"(?<!\\\\.)\\\\b(eps|false|Inf|inf|intmax|intmin|namelengthmax|NaN|nan|on|off|realmax|realmin|true|pi)\\\\b\", \"name\": \"constant.language.matlab\" }, \"control_statements\": { \"captures\": { \"1\": { \"name\": \"keyword.control.matlab\" } }, \"match\": \"\\\\s*(?:^|[\\\\s,;])(break|continue|return)\\\\b\", \"name\": \"meta.control.matlab\" }, \"curly_brackets\": { \"begin\": \"\\\\{\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"\\\\}\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"include\": \"#end_in_parens\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"end_in_parens\": { \"comment\": \"end as operator symbol\", \"match\": \"\\\\bend\\\\b\", \"name\": \"keyword.operator.symbols.matlab\" }, \"function\": { \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(function)\\n\\\\s+\\n(?:\\n(?:\\n(\\\\[) ([^\\\\]]*) (\\\\])\\n| ([a-zA-Z][a-zA-Z0-9_]*)\\n)\\n\\\\s* = \\\\s*\\n)?\\n([a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\n\\\\s*\\n\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.function.matlab\" }, \"3\": { \"name\": \"punctuation.definition.arguments.begin.matlab\" }, \"4\": { \"patterns\": [{ \"match\": \"\\\\w+\", \"name\": \"variable.parameter.output.matlab\" }] }, \"5\": { \"name\": \"punctuation.definition.arguments.end.matlab\" }, \"6\": { \"name\": \"variable.parameter.output.function.matlab\" }, \"7\": { \"name\": \"entity.name.function.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b(\\\\s*\\\\n)?\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.function.matlab\" } }, \"name\": \"meta.function.matlab\", \"patterns\": [{ \"begin\": \"\\\\G\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.arguments.function.matlab\", \"patterns\": [{ \"include\": \"#line_continuation\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.input.matlab\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(arguments)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.arguments.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.arguments.matlab\" }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.arguments.matlab\" } }, \"name\": \"meta.arguments.matlab\", \"patterns\": [{ \"include\": \"#validators\" }, { \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }] }, \"global_persistent\": { \"captures\": { \"1\": { \"name\": \"keyword.control.globalpersistent.matlab\" } }, \"match\": \"^\\\\s*(global|persistent)\\\\b\", \"name\": \"meta.globalpersistent.matlab\" }, \"indexing_curly_brackets\": { \"Comment\": \"Match identifier{idx, idx, } and stop at newline without ... This helps with partially written code like x{idx \", \"begin\": \"([a-zA-Z][a-zA-Z0-9_\\\\.]*\\\\s*)\\\\{\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"(\\\\}|(?<!\\\\.\\\\.\\\\.).\\\\n)\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"include\": \"#end_in_parens\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"line_continuation\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.symbols.matlab\" }, \"2\": { \"name\": \"comment.line.continuation.matlab\" } }, \"comment\": \"Line continuations\", \"match\": \"(\\\\.\\\\.\\\\.)(.*)$\", \"name\": \"meta.linecontinuation.matlab\" }, \"numbers\": { \"comment\": \"Valid numbers: 1, .1, 1.1, .1e1, 1.1e1, 1e1, 1i, 1j, 1e2j\", \"match\": \"(?<=[\\\\s\\\\-\\\\+\\\\*\\\\/\\\\\\\\=:\\\\[\\\\(\\\\{,]|^)\\\\d*\\\\.?\\\\d+([eE][+-]?\\\\d)?([0-9&&[^\\\\.]])*(i|j)?\\\\b\", \"name\": \"constant.numeric.matlab\" }, \"operators\": { \"comment\": \"Operator symbols\", \"match\": \"(?<=\\\\s)(==|~=|>|>=|<|<=|&|&&|:|\\\\||\\\\|\\\\||\\\\+|-|\\\\*|\\\\.\\\\*|/|\\\\./|\\\\\\\\|\\\\.\\\\\\\\|\\\\^|\\\\.\\\\^)(?=\\\\s)\", \"name\": \"keyword.operator.symbols.matlab\" }, \"parens\": { \"begin\": \"\\\\(\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"(\\\\)|(?<!\\\\.\\\\.\\\\.).\\\\n)\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"square_brackets\": { \"begin\": \"\\\\[\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"\\\\]\", \"patterns\": [{ \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"string\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"string.interpolated.matlab\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"Shell command\", \"match\": \"^\\\\s*((!).*$\\\\n?)\" }, { \"begin\": \"((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"Character vector literal (single-quoted)\", \"end\": \"'(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\s|;|:|,))\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.matlab\" } }, \"name\": \"string.quoted.single.matlab\", \"patterns\": [{ \"match\": \"''\", \"name\": \"constant.character.escape.matlab\" }, { \"match\": \"'(?=.)\", \"name\": \"invalid.illegal.unescaped-quote.matlab\" }, { \"comment\": \"Operator symbols\", \"match\": \"((\\\\%([\\\\+\\\\-0]?\\\\d{0,3}(\\\\.\\\\d{1,3})?)(c|d|e|E|f|g|G|s|((b|t)?(o|u|x|X))))|\\\\%\\\\%|\\\\\\\\(b|f|n|r|t|\\\\\\\\))\", \"name\": \"constant.character.escape.matlab\" }] }, { \"begin\": '((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"String literal (double-quoted)\", \"end\": '\"(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\||\\\\s|;|:|,))', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.matlab\" } }, \"name\": \"string.quoted.double.matlab\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.matlab\" }, { \"match\": '\"(?=.)', \"name\": \"invalid.illegal.unescaped-quote.matlab\" }] }] }, \"transpose\": { \"match\": \"\\\\.'\", \"name\": \"keyword.operator.transpose.matlab\" }, \"validator_strings\": { \"comment\": \"Simplified string patterns nested inside validator functions which don't change scopes of matches.\", \"patterns\": [{ \"patterns\": [{ \"begin\": \"((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)'\", \"comment\": \"Character vector literal (single-quoted)\", \"end\": \"'(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\s|;|:|,))\", \"name\": \"storage.type.matlab\", \"patterns\": [{ \"match\": \"''\" }, { \"match\": \"'(?=.)\" }, { \"match\": \"([^']+)\" }] }, { \"begin\": '((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)\"', \"comment\": \"String literal (double-quoted)\", \"end\": '\"(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\||\\\\s|;|:|,))', \"name\": \"storage.type.matlab\", \"patterns\": [{ \"match\": '\"\"' }, { \"match\": '\"(?=.)' }, { \"match\": '[^\"]+' }] }] }] }, \"validators\": { \"begin\": \"\\\\s*[;]?\\\\s*([a-zA-Z][a-zA-Z0-9_\\\\.\\\\?]*)\", \"comment\": \"Property and argument validation. Match an identifier allowing . and ?.\", \"end\": \"([;\\\\n%=].*)\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"Match comments\", \"match\": \"([%].*)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"Handle things like arg = val; nextArg\", \"match\": \"(=[^;]*)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#validators\" }] } }, \"comment\": \"End of property/argument patterns which start a new property/argument. Look for beginning of identifier after semicolon. Otherwise treat as regular code.\", \"match\": \"([\\\\n;]\\\\s*[a-zA-Z].*)\" }, { \"include\": \"$self\" }] } }, \"patterns\": [{ \"include\": \"#line_continuation\" }, { \"comment\": \"Size declaration\", \"match\": \"\\\\s*(\\\\([^\\\\)]*\\\\))\", \"name\": \"storage.type.matlab\" }, { \"comment\": \"Type declaration\", \"match\": \"([a-zA-Z][a-zA-Z0-9_\\\\.]*)\", \"name\": \"storage.type.matlab\" }, { \"include\": \"#braced_validator_list\" }] }, \"variables\": { \"comment\": \"MATLAB variables\", \"match\": \"(?<!\\\\.)\\\\b(nargin|nargout|varargin|varargout)\\\\b\", \"name\": \"variable.other.function.matlab\" } }, \"scopeName\": \"source.matlab\" });\nvar matlab = [\n  lang\n];\n\nexport { matlab as default };\n"],"names":["matlab","Object","freeze"],"sourceRoot":""}